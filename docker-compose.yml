version: '3'

# Serviços que iremos subir
services:
  # primeiro serviço é o zookeeper. Nós dependenmos dele para rodar o Apache kafka.
  # o Apache ZooKeeper é frequentemente utilizado em conjunto com o Kafka para fornecer serviços de coordenação e gerenciamento distribuído. 
  zookeeper:
    # sobre o image:
    # confluentinc: significa que é sua imagem base que está associada à Obsidian Dynamics
    # cp-zookeeper: é a imagem do zookeeper
    # latest: é a ultima versão disponível
    image: confluentinc/cp-zookeeper:latest
    networks:
      - broker-kafka # Aqui foi difinida uma rede, chamada: broker-kafka. obseve que ela foi criada no final do arquivo, em networks.
    # variáveis que vamos definir para o zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181 # Definindo em qual porta irá rodar
      ZOOKEEPER_TICK_TIME: 2000 # Definindo a porta do tick time. O tick time refere-se ao tempo base usado para regular o ritmo dos "ticks" (pulsações) do servidor ZooKeeper.

  # o segundo serviço é o kafka
  kafka:
    image: confluentinc/cp-kafka:latest # Definindo a imagem do kafka pádrão, na sua versão mais recente 
    networks:
      - broker-kafka # Definindo que o Kafka também vai rodar na rede broker-kafka. Onde teremos o serviço do zookeep rodando
    depends_on:
      - zookeeper # Definindo que o kafka depende do serviço do zookeeper pra rodar. O kafka não vai subir enquanto o zookeeper não subir primeiro
    ports:
      - "9092:9092" # Redirecionamento das partas. Aqui esatmos mapeando a porta 9092 da minha local para a porta 9092 do container
    # Definindo algumas variáveis que são do escopo do kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092 # O Kafka vai rodar na porta 29092 e o container na porta 9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # o terceiro serviço é o kafdrop, que é a interface gráfica do kafka, para conseguirmos ter um over viewer melhor do custer do kafka
  kafdrop:
    # sobre o image:
    # obsidiandynamics: significa que é sua imagem base que está associada à Obsidian Dynamics
    # kafdrop: é a imagem do kafdrop
    # latest: é a ultima versão disponível
    image: obsidiandynamics/kafdrop:latest
    networks:
      - broker-kafka # Definindo que o Kafka também vai rodar na rede broker-kafka.
    depends_on:
      - kafka # Definindo que o kafdrop depende do serviço do kafka pra rodar e que não vai subir enquanto o kafka não rodar. Ele não vai subir antes do zookeeper e nem do kafka.
    ports:
      - "19000:9000" # Redirecionamento das partas. Para que possamos acessar essa interface gráfica através do navagador, na porta 19000.
    environment:
    # Definindo uma variável do kafka broker connect, para que ele possa fazer a conexão com o broker do kafka 
      KAFKA_BROKERCONNECT: kafka:29092 # aqui eu posso definir como localhost ou definir com o nome do serviço que está rodando, que no caso é o serviço kafka que definimos antes na porta 29092

networks:
  broker-kafka: # é o nome da rede
    driver: bridge # o driver foi definido como bridge


### Para executar omeu arquivo ###

# Necessário ter o docker desktop instalado e rodando na máquina
# Comando para subir: 'docker-compose up' ou 'docker compose up' (sem o hífem "-", vai depender da versão instalada na máquina)
# Para parar basta usar um: Ctrl + c
# Para executar e deixar o terminal liberado: 'docker-compose up -d' ou 'docker compose up -d'
# Para parar usar o comando: 'docker-compose up down' ou 'docker compose up down'


## Testando o Kafdrop ##

# Abre o navegador e digita: localhost:19000